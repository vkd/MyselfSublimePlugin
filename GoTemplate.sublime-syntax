%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Go Template
file_extensions:
  - gotmpl
# first_line_match:
scope: source.gotmpl

contexts:
  main:
    - match: '\{\{'
      push: oper
    - match: ''
      push: Packages/GoSublime/syntax/GoSublime-Go-Legacy.sublime-syntax
      # push: Packages/Go/Go.sublime-syntax
      with_prototype:
        - match: '\{\{'
          # push: oper
          # pop: true
          set: oper
    # - match: '\{\{'
    #   push: oper
    # - match: ''
    #   push: gotmpl
      # push: Packages/Go/Go.sublime-syntax
      # with_prototype:
      #   - match: '\{\{'
      #     push: oper
      #     pop: true
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    # - match: '"'
    #   scope: punctuation.definition.string.begin.example-c
    #   push: double_quoted_string

    # # Comments begin with a '//' and finish at the end of the line
    # - match: '//'
    #   scope: punctuation.definition.comment.example-c
    #   push: line_comment

    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    # - match: '\b(if|else|for|while|range|end|import)\b'
    #   scope: keyword.control.gotmpl

    # - match: '\{\{'
    #   push: oper

  oper:
    - meta_scope: constant.numeric.gotmpl
    # - match: \\.
    #   scope: constant.character.escape.gotmpl
    - match: '-'
      scope: keyword.control.gotmpl
    - match: '\}\}'
      pop: true

  # gotmpl:
  #   - meta_scope: golang.code.gotmpl
  #   - match: ''
  #     push: Packages/GoSublime/syntax/GoSublime-Go-Legacy.sublime-syntax
  #     # push: Packages/Go/Go.sublime-syntax
  #     with_prototype:
  #       - match: '\{\{'
  #         push: oper
  #         pop: true

    # Numbers
    # - match: '\b(-)?[0-9.]+\b'
    #   scope: constant.numeric.example-c

  # double_quoted_string:
  #   - meta_scope: string.quoted.double.example-c
  #   - match: '\\.'
  #     scope: constant.character.escape.example-c
  #   - match: '"'
  #     scope: punctuation.definition.string.end.example-c
  #     pop: true

  # line_comment:
  #   - meta_scope: comment.line.example-c
  #   - match: $
  #     pop: true
